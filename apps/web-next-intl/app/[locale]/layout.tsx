import type { Metadata } from "next";
import { GeistSans } from "geist/font/sans";
import { NavigationItem, Scaffold } from "@app/layout";
import "../globals.css";
import {
	CalendarIcon,
	ChartPieIcon,
	DocumentDuplicateIcon,
	FolderIcon,
	HomeIcon,
	UsersIcon,
} from "@heroicons/react/24/outline";
import { unstable_setRequestLocale as setRequestLocale } from "next-intl/server";
import { ReactNode } from "react";
import { NextIntlClientProvider, useMessages } from "next-intl";

export const metadata: Metadata = {
	title: "Create Turborepo",
	description: "Generated by create turbo",
};

const navigation: NavigationItem[] = [
	{ name: "Dashboard", href: "/", icon: <HomeIcon /> },
	{ name: "Users", href: "/users", icon: <UsersIcon /> },
	{ name: "Projects", href: "#", icon: <FolderIcon /> },
	{ name: "Calendar", href: "#", icon: <CalendarIcon /> },
	{ name: "Documents", href: "#", icon: <DocumentDuplicateIcon /> },
	{ name: "Reports", href: "#", icon: <ChartPieIcon /> },
];

const locales = ["en", "sv", "is"];

export function generateStaticParams() {
	return locales.map((locale) => ({ locale }));
}

export default function LocaleLayout({
	children,
	params: { locale },
}: {
	children: ReactNode;
	params: { locale: string };
}) {
	// 	// If we want to use static rendering, a limitation right now with next-intl
	setRequestLocale(locale);
	const messages = useMessages();
	return (
		<html lang={locale} className="h-full bg-white">
			<body className={`${GeistSans.className} h-full`}>
				<NextIntlClientProvider locale={locale} messages={messages}>
					<Scaffold navigationItems={navigation}>{children}</Scaffold>
				</NextIntlClientProvider>
			</body>
		</html>
	);
}
